{"remainingRequest":"/Users/yujunjiang/Documents/GitHub/a-different-game/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/yujunjiang/Documents/GitHub/a-different-game/src/components/ChartYAxis.vue?vue&type=style&index=0&id=4e2566ac&scoped=true&lang=css","dependencies":[{"path":"/Users/yujunjiang/Documents/GitHub/a-different-game/src/components/ChartYAxis.vue","mtime":1620184539127},{"path":"/Users/yujunjiang/Documents/GitHub/a-different-game/node_modules/css-loader/dist/cjs.js","mtime":1620184537154},{"path":"/Users/yujunjiang/Documents/GitHub/a-different-game/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1620184538933},{"path":"/Users/yujunjiang/Documents/GitHub/a-different-game/node_modules/postcss-loader/src/index.js","mtime":1620184538263},{"path":"/Users/yujunjiang/Documents/GitHub/a-different-game/node_modules/cache-loader/dist/cjs.js","mtime":1620184536839},{"path":"/Users/yujunjiang/Documents/GitHub/a-different-game/node_modules/vue-loader-v16/dist/index.js","mtime":1620184538932}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5heGlzIHsKICBmb250LXNpemU6IDEycHg7CiAgbGluZS1oZWlnaHQ6IDI4cHg7Cn0K"},{"version":3,"sources":["/Users/yujunjiang/Documents/GitHub/a-different-game/src/components/ChartYAxis.vue"],"names":[],"mappings":";AAoHA,CAAC,CAAC,CAAC,CAAC,EAAE;EACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACnB","file":"/Users/yujunjiang/Documents/GitHub/a-different-game/src/components/ChartYAxis.vue","sourceRoot":"","sourcesContent":["<template>\n  <g class=\"axis axis--y\">\n    <line\n      class=\"domain\"\n      :y1=\"y.range()[0]\"\n      :y2=\"y.range()[1]\"\n      stroke=\"currentColor\"\n    ></line>\n    <g v-for=\"(t, i) in ticks\" \n      :key=\"t\"\n      :transform=\"`translate(0,${translate(t)})`\"\n      class=\"tick\"\n    >\n      <line\n        x2=\"-10\"\n        stroke=\"currentColor\"\n      ></line>\n      <text\n        :transform=\"`translate(-${tickPadding},0)`\"\n        dy=\"0.32em\"\n        text-anchor=\"end\"\n        fill=\"currentColor\"\n      >\n        <template v-if=\"wrapWidth\">\n          <!-- Only for ordinal scale and no tick format -->\n          <template v-if=\"wrappedTicks[i].length === 1\">\n            {{ t }}\n          </template>\n          <template v-else>\n            <tspan v-for=\"(l, j) in wrappedTicks[i]\" :key=\"j\"\n              x=\"0\"\n              :y=\"(j - (wrappedTicks[i].length - 1) / 2) * 16\"\n            >{{ l }}</tspan>\n          </template>\n        </template>\n        <template v-else>\n          {{ tickFormat(t) }}\n        </template>\n      </text>\n    </g>\n  </g>\n</template>\n\n<script>\n  import { select } from \"d3\";\n  export default {\n    props: {\n      y: {\n        type: Function,\n        required: true \n      },\n      tickValues: {\n        type: Array,\n        default: () => []\n      },\n      tickFormat: {\n        type: Function,\n        default: d => d\n      },\n      tickPadding: {\n        type: Number,\n        default: 15\n      },\n      wrapWidth: {\n        type: Number,\n        default: 0\n      }\n    },\n    computed: {\n      ticks() {\n        return this.tickValues.length\n          ? this.tickValues // Custom defined tick values\n          : this.y.ticks \n          ? this.y.ticks((Math.abs(this.y.range()[0] - this.y.range()[1])) / 50) // Continouous scale\n          : this.y.domain() // Ordinal scale\n      },\n      translate() {\n        return this.y.ticks\n          ? t => this.y(t) // Continuous scale\n          : this.y.paddingInner\n          ? t => this.y(t) + this.y.bandwidth() / 2 // Band scale\n          : t => this.y(t) + this.y.step() / 2 // Point scale\n      },\n      wrappedTicks() {\n        if (!this.wrapWidth) return undefined;\n        return this.ticks.map(tick => {\n          const totalWidth = this.measureTextWidth(tick, \"axis\");\n          if (totalWidth < this.wrapWidth) return [tick];\n          const words = tick.split(\" \");\n          let line = [];\n          do {\n            line.push(words.shift());\n          } while (this.measureTextWidth(line.join(\" \"), \"axis\") < totalWidth / 2);\n          return [\n            line.join(\" \"),\n            words.join(\" \")\n          ]\n        })\n      },\n    },\n    methods: {\n      measureTextWidth(string, className) {\n        const svg = select(window.document.body).append(\"svg\");\n        const text = svg\n          .append(\"text\")\n          .attr(\"class\", className)\n          .text(string);\n        const bbox = text.node().getBBox();\n        svg.remove();\n        return bbox.width;\n      }\n    },\n  }\n</script>\n\n<style scoped>\n.axis {\n  font-size: 12px;\n  line-height: 28px;\n}\n</style>"]}]}